# -*- coding: utf-8 -*-
"""Master's Diploma

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BPYcsbVziVMmSy9j4eDOEvDc8PGkLl6U
"""

from google.colab import drive
drive.mount('/content/drive')

import sys
sys.path.insert(0, '/content/drive/My Drive/Masters')

# Commented out IPython magic to ensure Python compatibility.
import os
import pandas as pd
import numpy as np
import datetime
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline
import plotly.express as px
import plotly.graph_objects as go
import matplotlib.dates as mdates
xformatter = mdates.DateFormatter('%H:%M')
import matplotlib as tf

import sklearn
from scipy.optimize import curve_fit

import warnings
warnings.filterwarnings('ignore')

df_gen1 = pd.read_csv("./drive/MyDrive/Masters/Plant_1_Generation_Data.csv")
df_gen2 = pd.read_csv("./drive/MyDrive/Masters/Plant_2_Generation_Data.csv")

df_weather1 = pd.read_csv("./drive/MyDrive/Masters/Plant_1_Weather_Sensor_Data.csv")
df_weather2 = pd.read_csv("./drive/MyDrive/Masters/Plant_2_Weather_Sensor_Data.csv")

df_gen1.info()

df_weather1.info()

df_gen1.isnull().sum().sort_values(ascending=False)

df_gen1.isnull().sum().sort_values(ascending=False)

df_gen1['DATE_TIME'] = pd.to_datetime(df_gen1['DATE_TIME'],format = '%d-%m-%Y %H:%M')
df_weather1['DATE_TIME'] = pd.to_datetime(df_weather1['DATE_TIME'],format = '%Y-%m-%d %H:%M:%S')

df_gen2['DATE_TIME'] = pd.to_datetime(df_gen2['DATE_TIME'],format = '%Y-%m-%d %H:%M:%S')
df_weather2['DATE_TIME'] = pd.to_datetime(df_weather2['DATE_TIME'],format = '%Y-%m-%d %H:%M:%S')

df_plant1 = pd.merge(df_gen1.drop(columns = ['PLANT_ID']), df_weather1.drop(columns = ['PLANT_ID', 'SOURCE_KEY']), on='DATE_TIME')

df_plant1.head()



df_plant1['DATE_TIME'] = pd.to_datetime(df_plant1['DATE_TIME'])

df_plant1['DATE'] = df_plant1['DATE_TIME'].dt.date
df_plant1['TIME'] = df_plant1['DATE_TIME'].dt.time

df_plant1['HOURS'] = df_plant1['DATE_TIME'].dt.hour
df_plant1['MINUTES'] = df_plant1['DATE_TIME'].dt.minute
df_plant1['MINUTES_PASS'] = df_plant1['HOURS'] * 60 + df_plant1['MINUTES']

df_plant1['DATE_STR'] = df_plant1['DATE'].astype(str)

sensor_keys = df_plant1['SOURCE_KEY'].unique()
sensor_numbers = dict(zip(sensor_keys, range(1, len(sensor_keys) + 1)))

df_plant1['SENSOR_NUM'] = df_plant1['SOURCE_KEY'].map(sensor_numbers)

df_plant1['SENSOR_NAME'] = df_plant1['SENSOR_NUM'].astype(str)

df_plant1.head()

df_plant1.info()

"""Аналіз

"""

numeric_columns = df_plant1.select_dtypes(include=np.number).columns.tolist()
corr_df = df_plant1[numeric_columns].corr()

mask = np.triu(np.ones_like(corr_df, dtype=bool))

plt.figure(figsize=(10, 8))
sns.heatmap(corr_df, mask=mask, annot=True,  linewidths=0.5, fmt=".2f", square=True, cbar_kws={"shrink": .75})
plt.title('Матриця кореляції для усіх числових значень')
plt.show()

"""Daily Yield and AC Power¶

"""

def showPowerAndYield(df_plant1):
    plt.figure(figsize=(12, 6), dpi=100)
    plt.plot(df_plant1['DATE_TIME'], df_plant1['DAILY_YIELD'], color='royalblue', linestyle='-', marker='o', markersize=4, linewidth=1.5)
    plt.title('Щоденний виробіток протягом всього часу', fontsize=16, color='royalblue')
    plt.ylabel('Кіловати', fontsize=13)
    plt.xlabel('Час', fontsize=13)
    plt.grid(True, linestyle='--', color='grey', alpha=0.5)
    plt.xticks(rotation=45, ha='right')

    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d %H:%M'))
    plt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=1))
    plt.tight_layout()
    plt.show()

    df_plant1['DATETIME'] = df_plant1.apply(lambda row: pd.Timestamp.combine(row['DATE_TIME'].date(), row['TIME']), axis=1)
    plt.figure(figsize=(12, 6), dpi=100)
    plt.plot(df_plant1['DATETIME'], df_plant1['AC_POWER'], color='coral', linestyle='-', marker='x', markersize=4, label='AC Power', linewidth=1.2, alpha=0.7)
    plt.plot(df_plant1['DATETIME'], df_plant1['DC_POWER'], color='teal', linestyle='--', marker='s', markersize=4, label='DC Power', linewidth=1.2, alpha=0.7)
    plt.title('Постійний та змінний струм протягом дня', fontsize=16)
    plt.ylabel('Потужність у кіловатах', fontsize=13)
    plt.xlabel('Час', fontsize=13)
    plt.legend(fontsize=11, loc='upper left')
    plt.grid(True, linestyle='--', color='grey', alpha=0.5)
    plt.xticks(rotation=45, ha='right')

    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))
    plt.gca().xaxis.set_major_locator(mdates.HourLocator(interval=12))
    plt.tight_layout()
    plt.show()

showPowerAndYield(df_plant1)

"""Daily and Total Yield"""

def showYield(df_plant1):
    df_plant1['date'] = pd.to_datetime(df_plant1['date']).dt.date

    df_plant1_grouped = df_plant1.groupby('date').sum(numeric_only=True)

    plt.figure(figsize=(12, 6), dpi=100)
    plt.fill_between(df_plant1_grouped.index, df_plant1_grouped['DAILY_YIELD'], color='mediumseagreen', alpha=0.6)
    plt.plot(df_plant1_grouped.index, df_plant1_grouped['DAILY_YIELD'], color='darkgreen', linestyle='-', linewidth=1.8, label='Daily Yield')

    plt.title('Щоденний виробіток', fontsize=18, color='darkgreen')
    plt.ylabel('Кіловати', fontsize=13)
    plt.xlabel('Дата', fontsize=13)
    plt.legend(loc='upper left', fontsize=11, frameon=False)
    plt.grid(True, linestyle='--', color='grey', alpha=0.3)
    plt.xticks(rotation=45, ha='right', color='darkslategrey')
    plt.yticks(color='darkslategrey')
    plt.tight_layout()
    plt.show()

showYield(df_plant1)

def showTotalYield(df_plant1):
    df_plant1['date'] = pd.to_datetime(df_plant1['DATE_TIME']).dt.date
    df_plant1_grouped = df_plant1.groupby('date').sum(numeric_only=True)

    plt.figure(figsize=(12, 6), dpi=100)
    df_plant1_grouped['TOTAL_YIELD'].plot(kind='bar', color='teal', alpha=0.8)
    plt.title('Total Yield', fontsize=16, color='teal')
    plt.ylabel('kW', fontsize=13)
    plt.xlabel('Date', fontsize=13)
    plt.xticks(rotation=45, ha='right')
    plt.grid(True, linestyle='--', color='grey', alpha=0.3)
    plt.tight_layout()
    plt.show()

showTotalYield(df_plant1)

"""Інсоляція, температура модулів та навколишнього середовища"""

def showIrradiation(df_plant1):
    df_plant1['DATETIME'] = df_plant1.apply(lambda row: pd.Timestamp.combine(row['DATE_TIME'].date(), row['TIME']), axis=1)

    plt.figure(figsize=(12, 6), dpi=100)
    plt.fill_between(df_plant1['DATETIME'], df_plant1['IRRADIATION'], color='lightcoral', alpha=0.3)
    plt.plot(df_plant1['DATETIME'], df_plant1['IRRADIATION'], color='darkred', linestyle='-', linewidth=1.5)
    plt.title('Інсоляція протягом світлового дня', fontsize=18, color='darkred')
    plt.ylabel('В/м.кв.', fontsize=13)
    plt.xlabel('Дата', fontsize=13)
    plt.grid(True, linestyle='--', color='grey', alpha=0.5)
    plt.xticks(rotation=45, ha='right', color='maroon')
    plt.tight_layout()
    plt.show()

showIrradiation(df_plant1)

def showTemperature(df_plant1):
  plt.figure(figsize=(18, 6), dpi=100)
  df_plant1.set_index('DATE_TIME')[['AMBIENT_TEMPERATURE', 'MODULE_TEMPERATURE']].plot.area(
      linewidth=1.5, alpha=0.6
  )
  plt.title('Відносна температура та температура модуля', fontsize=18, color='darkgreen')
  plt.ylabel('Градуси Цельсія', fontsize=13)
  plt.xlabel('Дата', fontsize=13)
  plt.legend(loc='upper left', fontsize=11, frameon=False)
  plt.grid(True, linestyle='--', color='grey', alpha=0.3)
  plt.xticks(rotation=45, ha='right', color='darkslategrey')
  plt.yticks(color='darkslategrey')
  plt.tight_layout()
  plt.show()

showTemperature(df_plant1)

"""
Потужність та інсоляція"""

plt.figure(figsize=(10, 5))
for source_key in df_plant1['SOURCE_KEY'].unique():
    subset = df_plant1[df_plant1['SOURCE_KEY'] == source_key]
    sns.regplot(data=subset, x="MODULE_TEMPERATURE", y="DC_POWER", scatter_kws={"s": 50}, line_kws={"color": "red"})
plt.title('Показники температури та змінного струму для кожного інвертора', fontsize=18, color='darkgreen')
plt.ylabel('Змінний струм, кВт', fontsize=13)
plt.xlabel('Температура модуля, С', fontsize=13)
plt.show()

"""Аналіз інверторів"""

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

def showPowerBySource(gen_1):
    dc_gen = gen_1.copy()

    dc_gen['time'] = pd.to_datetime(dc_gen['DATE_TIME']).dt.time

    dc_gen = dc_gen.groupby(['time', 'SOURCE_KEY'])['DC_POWER'].mean().unstack()

    cmap = sns.color_palette("Spectral", n_colors=12)
    fig, ax = plt.subplots(ncols=2, nrows=1, dpi=100, figsize=(20, 6))

    dc_gen.iloc[:, 0:11].plot(kind='bar', stacked=True, ax=ax[0], color=cmap)
    ax[0].set_title('1-11 інвертори', fontsize=14)
    ax[0].set_ylabel('Змінний струм, кВт', fontsize=12, color='navy')
    ax[0].set_xlabel('Дата', fontsize=12)
    ax[0].tick_params(axis='x', rotation=45)
    ax[0].legend(title='Інвертори', fontsize=10)

    dc_gen.iloc[:, 11:22].plot(kind='bar', stacked=True, ax=ax[1], color=cmap)
    ax[1].set_title('12-22 інвертори', fontsize=14)
    ax[1].set_xlabel('Дата', fontsize=12)
    ax[1].tick_params(axis='x', rotation=45)
    ax[1].legend(title='Інвертори', fontsize=10)

    plt.tight_layout()
    plt.show()

showPowerBySource(df_plant1)

"""Ми будемо використовувати дані DAILY_YIELD за перші 60 хвилин як вхідні в масиві X, а відповідним виходом для цього масиву X буде Y, що представляє DAILY_YIELD на 75-й хвилині. Для наступного кроку ми візьмемо дані DAILY_YIELD за наступні 60 хвилин як вхід, а виходом знову буде DAILY_YIELD на 75-й хвилині.

Цей підхід ковзного вікна продовжуватиметься зі зсувом вікна вперед, що дозволить моделі навчитися, як змінюється виробіток з часом, і робити прогнози для майбутніх часових інтервалів.
"""

df = df_gen1.copy()
df.head()

df['DATE_TIME'] = pd.to_datetime(df['DATE_TIME'], format='%d-%m-%Y %H:%M')
df.set_index('DATE_TIME', inplace=True)
df_resampled = df.resample('15T').sum()

df_resampled['DAILY_YIELD_MW'] = df_resampled['DAILY_YIELD']/1000
df_resampled.head()

daily_yield = df_resampled['DAILY_YIELD_MW']
daily_yield.head(20)
daily_yield.shape

def df_to_X_y(df, window_size=5):
    df_as_np = df.to_numpy()
    X = []
    y = []
    for i in range(len(df_as_np)-window_size):
        row = [[a] for a in df_as_np[i:i+window_size]]
        X.append(row)
        label = df_as_np[i+window_size]
        y.append(label)
    return np.array(X), np.array(y)

WINDOW_SIZE = 5
X, y = df_to_X_y(daily_yield, WINDOW_SIZE)
X.shape, y.shape

"""TRAIN, VALIDATION AND TEST DATASET SPLITTING"""

X_train, y_train  = X[:2600], y[:2600]
X_val, y_val  = X[2600:2900], y[2600:2900]
X_test, y_test  = X[2900:], y[2900:]

print(X_train.shape, y_train.shape)
print(X_val.shape, y_val.shape)
print(X_test.shape, y_test.shape)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, InputLayer, Dropout
from tensorflow.keras.losses import MeanSquaredError
from tensorflow.keras.metrics import RootMeanSquaredError
from tensorflow.keras.optimizers import Adam

model = Sequential()

model.add(InputLayer(input_shape=(5, 1)))

model.add(LSTM(32))

model.add(Dense(8, activation='relu'))

model.add(Dropout(0.2))

model.add(Dense(1, activation='linear'))

model.compile(optimizer=Adam(), loss=MeanSquaredError(), metrics=[RootMeanSquaredError()])

model.summary()

from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping
from tensorflow.keras.losses import MeanSquaredError
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.metrics import RootMeanSquaredError

cp = ModelCheckpoint(
    filepath='model1/best_model.keras',
    monitor='val_root_mean_squared_error',
    save_best_only=True,
    save_weights_only=False,
    verbose=1
)

es = EarlyStopping(
    monitor='val_root_mean_squared_error',
    patience=10,
    restore_best_weights=True,
    verbose=1
)

model.compile(
    loss=MeanSquaredError(),
    optimizer=Adam(learning_rate=1e-4),
    metrics=[RootMeanSquaredError()]
)

model.fit(
    X_train,
    y_train,
    validation_data=(X_val, y_val),
    epochs=75,
    batch_size=32,
    callbacks=[cp, es],
    verbose=1
)

from tensorflow.keras.models import load_model

model = load_model('model1/best_model.keras')

model.summary()

"""train dataset"""

train_predictions = model.predict(X_train).flatten()

train_results = pd.DataFrame({
    'Train Predictions': train_predictions,
    'Actual Values': y_train.flatten()
})

train_results.head()

import matplotlib.pyplot as plt

plt.figure(figsize=(10, 6))

# Plot the Train Predictions with a filled area
plt.fill_between(train_results.index[50:100], train_results['Train Predictions'][50:100], color='blue', alpha=0.3, label='Передбачення на тренувальних даних')

# Plot the Actual Values with a filled area
plt.fill_between(train_results.index[50:100], train_results['Actual Values'][50:100], color='green', alpha=0.3, label='Реальні дані')

plt.title('Порівняння результатів передбачень на тренувальних даних та справжніх даних', fontsize=16)
plt.xlabel('Часовий крок', fontsize=12)
plt.ylabel('Щоденний виробіток', fontsize=12)
plt.grid(True)

plt.legend()

plt.tight_layout()
plt.show()

"""VALIDATION DATA"""

val_predictions = model.predict(X_val).flatten()

val_results = pd.DataFrame({
    'Val Predictions': val_predictions,
    'Actual Values': y_val.flatten()
})

val_results.head()

import matplotlib.pyplot as plt

plt.figure(figsize=(10, 6))

plt.fill_between(val_results.index[:50], val_results['Val Predictions'][:50], color='blue', alpha=0.3, label='Передбачення на валідаційних даних')

plt.fill_between(val_results.index[:50], val_results['Actual Values'][:50], color='orange', alpha=0.3, label='Реальні дані')

plt.title('Порівняння результатів передбачень на валідаційних даних та справжніх даних', fontsize=16)
plt.xlabel('Часовий крок', fontsize=12)
plt.ylabel('Щоденний виробіток', fontsize=12)
plt.grid(True)

plt.legend()

plt.tight_layout()
plt.show()

"""test dataset"""

test_predictions_1 = model.predict(X_test).flatten()

test_results_1 = pd.DataFrame({
    'Test Predictions': test_predictions_1,
    'Actual Values': y_test.flatten()
})

test_results_1.head()

import matplotlib.pyplot as plt

plt.figure(figsize=(10, 6))

plt.fill_between(test_results_1.index[:50], test_results_1['Test Predictions'][:50], color='blue', alpha=0.3, label='Передбачення на тестових даних')

plt.fill_between(test_results_1.index[:50], test_results_1['Actual Values'][:50], color='red', alpha=0.3, label='Реальні дані')

plt.title('Порівняння результатів передбачень на тестових даних та справжніх даних', fontsize=16)
plt.xlabel('Крок часу', fontsize=12)
plt.ylabel('Щоденний виробіток', fontsize=12)
plt.grid(True)

plt.legend()

plt.tight_layout()
plt.show()

import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import pandas as pd

def showModelPerformance(y_true, y_pred):
    y_true = y_true.flatten()
    y_pred = y_pred.flatten()

    mse = mean_squared_error(y_true, y_pred)
    rmse = np.sqrt(mse)
    mae = mean_absolute_error(y_true, y_pred)
    r2 = r2_score(y_true, y_pred)

    print(f"Mean Squared Error (MSE): {mse:.4f}")
    print(f"Root Mean Squared Error (RMSE): {rmse:.4f}")
    print(f"Mean Absolute Error (MAE): {mae:.4f}")
    print(f"R² Score: {r2:.4f}")

    residuals = y_true - y_pred

    plt.figure(figsize=(14, 7))

    plt.subplot(1, 2, 1)
    plt.boxplot(residuals, vert=False, patch_artist=True, boxprops=dict(facecolor='skyblue', color='blue'))
    plt.title('Розподіл залишків')
    plt.xlabel('Залишки')

    plt.subplot(1, 2, 2)
    plt.scatter(y_true, y_pred, alpha=0.6, color='orange')
    plt.title('Передбачені та реальні дані')
    plt.xlabel('Реальні дані')
    plt.ylabel('Передбачені дані')
    plt.plot([min(y_true), max(y_true)], [min(y_true), max(y_true)], color='red', linestyle='--')

    plt.tight_layout()
    plt.show()

    plt.figure(figsize=(10, 6))
    plt.fill_between(range(len(y_true)), y_true, y_pred, color='blue', alpha=0.3, label='Площа різниці')
    plt.plot(y_true, label='Реальні дані', color='green', linewidth=2)
    plt.plot(y_pred, label='Передбачені дані', color='orange', linewidth=2, alpha=0.7)
    plt.title('Реальні та передбачені дані')
    plt.xlabel('Індекс')
    plt.ylabel('Дані')
    plt.legend()
    plt.show()

    metrics = {
        'MSE': mse,
        'RMSE': rmse,
        'MAE': mae,
        'R²': r2
    }

    return metrics

train_metrics_model1 = showModelPerformance(y_test, test_predictions_1)

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau

model2 = Sequential()

model2.add(LSTM(128, return_sequences=True, input_shape=(X_train.shape[1], X_train.shape[2])))
model2.add(Dropout(0.2))
model2.add(LSTM(64, return_sequences=False))
model2.add(Dropout(0.2))

model2.add(Dense(32, activation='relu'))
model2.add(Dense(1, activation='linear'))

model2.compile(optimizer=Adam(learning_rate=0.001), loss='mean_squared_error', metrics=['RootMeanSquaredError'])

early_stopping = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)
checkpoint = ModelCheckpoint('model2_best.keras', save_best_only=True, monitor='val_loss')
lr_scheduler = ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=5, min_lr=1e-6)

history = model2.fit(X_train, y_train,
                     validation_data=(X_val, y_val),
                     epochs=100,
                     batch_size=64,
                     callbacks=[early_stopping, checkpoint, lr_scheduler])

model2.load_weights('model2_best.keras')

model2.summary()

test_predictions_2 = model2.predict(X_test).flatten()

test_results_2 = pd.DataFrame({
    'Test Predictions': test_predictions_2,
    'Actual Values': y_test.flatten()
})

test_results_2.head()

import matplotlib.pyplot as plt

plt.figure(figsize=(10, 6))

plt.fill_between(test_results_2.index[:50], test_results_2['Test Predictions'][:50], color='blue', alpha=0.3, label='Передбачення на тестових даних')

plt.fill_between(test_results_2.index[:50], test_results_2['Actual Values'][:50], color='red', alpha=0.3, label='Реальні дані')

plt.title('Порівняння результатів передбачень на тестових даних та справжніх даних', fontsize=16)
plt.xlabel('Крок часу', fontsize=12)
plt.ylabel('Щоденний виробіток', fontsize=12)
plt.grid(True)

plt.legend()

plt.tight_layout()
plt.show()

train_metrics_model2 = showModelPerformance(y_test, test_predictions_2)